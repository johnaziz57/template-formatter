// Generated from src/antlr/JSON.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly START_BLOCK_2 = 10;
	public static readonly ELSE_BLOCK_2 = 11;
	public static readonly END_BLOCK_2 = 12;
	public static readonly L_OPERATOR_2 = 13;
	public static readonly R_OPERATOR_2 = 14;
	public static readonly T_EXPRESSION = 15;
	public static readonly STRING = 16;
	public static readonly NUMBER = 17;
	public static readonly WS = 18;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"START_BLOCK_2", "ELSE_BLOCK_2", "END_BLOCK_2", "L_OPERATOR_2", "R_OPERATOR_2", 
		"T_EXPRESSION", "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "NUMBER", 
		"INT", "EXP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", 
		"'null'", undefined, undefined, undefined, "'{{'", "'}}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "START_BLOCK_2", "ELSE_BLOCK_2", "END_BLOCK_2", 
		"L_OPERATOR_2", "R_OPERATOR_2", "T_EXPRESSION", "STRING", "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\xCE\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x06\vS\n\v\r\v\x0E\vT\x03\v\x07\vX\n\v\f\v" +
		"\x0E\v[\v\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x06\rj\n\r\r\r\x0E\rk\x03\r\x07\ro\n\r\f\r\x0E\r" +
		"r\v\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x07\x10~\n\x10\f\x10\x0E\x10\x81\v\x10\x03\x10\x06\x10\x84" +
		"\n\x10\r\x10\x0E\x10\x85\x03\x10\x07\x10\x89\n\x10\f\x10\x0E\x10\x8C\v" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x07\x11\x93\n\x11\f\x11\x0E" +
		"\x11\x96\v\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x05\x12\x9D\n\x12" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x16\x05\x16\xAA\n\x16\x03\x16\x03\x16\x03\x16\x06\x16\xAF" +
		"\n\x16\r\x16\x0E\x16\xB0\x05\x16\xB3\n\x16\x03\x16\x05\x16\xB6\n\x16\x03" +
		"\x17\x03\x17\x03\x17\x07\x17\xBB\n\x17\f\x17\x0E\x17\xBE\v\x17\x05\x17" +
		"\xC0\n\x17\x03\x18\x03\x18\x05\x18\xC4\n\x18\x03\x18\x03\x18\x03\x19\x06" +
		"\x19\xC9\n\x19\r\x19\x0E\x19\xCA\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x11!\x02\x12#\x02\x02%\x02\x02\'\x02\x02)\x02\x02+\x02\x13-\x02" +
		"\x02/\x02\x021\x02\x14\x03\x02\v\x04\x02UUYY\n\x02$$11^^ddhhppttvv\x05" +
		"\x022;CHch\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--" +
		"//\x05\x02\v\f\x0F\x0F\"\"\x02\xD9\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02+\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x033\x03\x02\x02\x02\x055\x03\x02\x02\x02\x07" +
		"7\x03\x02\x02\x02\t9\x03\x02\x02\x02\v;\x03\x02\x02\x02\r=\x03\x02\x02" +
		"\x02\x0F?\x03\x02\x02\x02\x11D\x03\x02\x02\x02\x13J\x03\x02\x02\x02\x15" +
		"O\x03\x02\x02\x02\x17^\x03\x02\x02\x02\x19f\x03\x02\x02\x02\x1Bu\x03\x02" +
		"\x02\x02\x1Dx\x03\x02\x02\x02\x1F{\x03\x02\x02\x02!\x8F\x03\x02\x02\x02" +
		"#\x99\x03\x02\x02\x02%\x9E\x03\x02\x02\x02\'\xA4\x03\x02\x02\x02)\xA6" +
		"\x03\x02\x02\x02+\xA9\x03\x02\x02\x02-\xBF\x03\x02\x02\x02/\xC1\x03\x02" +
		"\x02\x021\xC8\x03\x02\x02\x0234\x07}\x02\x024\x04\x03\x02\x02\x0256\x07" +
		".\x02\x026\x06\x03\x02\x02\x0278\x07\x7F\x02\x028\b\x03\x02\x02\x029:" +
		"\x07<\x02\x02:\n\x03\x02\x02\x02;<\x07]\x02\x02<\f\x03\x02\x02\x02=>\x07" +
		"_\x02\x02>\x0E\x03\x02\x02\x02?@\x07v\x02\x02@A\x07t\x02\x02AB\x07w\x02" +
		"\x02BC\x07g\x02\x02C\x10\x03\x02\x02\x02DE\x07h\x02\x02EF\x07c\x02\x02" +
		"FG\x07n\x02\x02GH\x07u\x02\x02HI\x07g\x02\x02I\x12\x03\x02\x02\x02JK\x07" +
		"p\x02\x02KL\x07w\x02\x02LM\x07n\x02\x02MN\x07n\x02\x02N\x14\x03\x02\x02" +
		"\x02OP\x05\x1B\x0E\x02PR\x07%\x02\x02QS\x05)\x15\x02RQ\x03\x02\x02\x02" +
		"ST\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UY\x03\x02\x02\x02" +
		"VX\t\x02\x02\x02WV\x03\x02\x02\x02X[\x03\x02\x02\x02YW\x03\x02\x02\x02" +
		"YZ\x03\x02\x02\x02Z\\\x03\x02\x02\x02[Y\x03\x02\x02\x02\\]\x05\x1D\x0F" +
		"\x02]\x16\x03\x02\x02\x02^_\x05\x1B\x0E\x02_`\x07g\x02\x02`a\x07n\x02" +
		"\x02ab\x07u\x02\x02bc\x07g\x02\x02cd\x03\x02\x02\x02de\x05\x1D\x0F\x02" +
		"e\x18\x03\x02\x02\x02fg\x05\x1B\x0E\x02gi\x071\x02\x02hj\x05)\x15\x02" +
		"ih\x03\x02\x02\x02jk\x03\x02\x02\x02ki\x03\x02\x02\x02kl\x03\x02\x02\x02" +
		"lp\x03\x02\x02\x02mo\t\x02\x02\x02nm\x03\x02\x02\x02or\x03\x02\x02\x02" +
		"pn\x03\x02\x02\x02pq\x03\x02\x02\x02qs\x03\x02\x02\x02rp\x03\x02\x02\x02" +
		"st\x05\x1D\x0F\x02t\x1A\x03\x02\x02\x02uv\x07}\x02\x02vw\x07}\x02\x02" +
		"w\x1C\x03\x02\x02\x02xy\x07\x7F\x02\x02yz\x07\x7F\x02\x02z\x1E\x03\x02" +
		"\x02\x02{\x7F\x05\x1B\x0E\x02|~\t\x02\x02\x02}|\x03\x02\x02\x02~\x81\x03" +
		"\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x83\x03" +
		"\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x82\x84\x05)\x15\x02\x83\x82\x03" +
		"\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03" +
		"\x02\x02\x02\x86\x8A\x03\x02\x02\x02\x87\x89\t\x02\x02\x02\x88\x87\x03" +
		"\x02\x02\x02\x89\x8C\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03" +
		"\x02\x02\x02\x8B\x8D\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8D\x8E\x05" +
		"\x1D\x0F\x02\x8E \x03\x02\x02\x02\x8F\x94\x07$\x02\x02\x90\x93\x05#\x12" +
		"\x02\x91\x93\x05)\x15\x02\x92\x90\x03\x02\x02\x02\x92\x91\x03\x02\x02" +
		"\x02\x93\x96\x03\x02\x02\x02\x94\x92\x03\x02\x02\x02\x94\x95\x03\x02\x02" +
		"\x02\x95\x97\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x97\x98\x07$\x02" +
		"\x02\x98\"\x03\x02\x02\x02\x99\x9C\x07^\x02\x02\x9A\x9D\t\x03\x02\x02" +
		"\x9B\x9D\x05%\x13\x02\x9C\x9A\x03\x02\x02\x02\x9C\x9B\x03\x02\x02\x02" +
		"\x9D$\x03\x02\x02\x02\x9E\x9F\x07w\x02\x02\x9F\xA0\x05\'\x14\x02\xA0\xA1" +
		"\x05\'\x14\x02\xA1\xA2\x05\'\x14\x02\xA2\xA3\x05\'\x14\x02\xA3&\x03\x02" +
		"\x02\x02\xA4\xA5\t\x04\x02\x02\xA5(\x03\x02\x02\x02\xA6\xA7\n\x05\x02" +
		"\x02\xA7*\x03\x02\x02\x02\xA8\xAA\x07/\x02\x02\xA9\xA8\x03\x02\x02\x02" +
		"\xA9\xAA\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xB2\x05-\x17\x02" +
		"\xAC\xAE\x070\x02\x02\xAD\xAF\t\x06\x02\x02\xAE\xAD\x03\x02\x02\x02\xAF" +
		"\xB0\x03\x02\x02\x02\xB0\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1" +
		"\xB3\x03\x02\x02\x02\xB2\xAC\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3" +
		"\xB5\x03\x02\x02\x02\xB4\xB6\x05/\x18\x02\xB5\xB4\x03\x02\x02\x02\xB5" +
		"\xB6\x03\x02\x02\x02\xB6,\x03\x02\x02\x02\xB7\xC0\x072\x02\x02\xB8\xBC" +
		"\t\x07\x02\x02\xB9\xBB\t\x06\x02\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBE\x03" +
		"\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xC0\x03" +
		"\x02\x02\x02\xBE\xBC\x03\x02\x02\x02\xBF\xB7\x03\x02\x02\x02\xBF\xB8\x03" +
		"\x02\x02\x02\xC0.\x03\x02\x02\x02\xC1\xC3\t\b\x02\x02\xC2\xC4\t\t\x02" +
		"\x02\xC3\xC2\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02\xC4\xC5\x03\x02\x02" +
		"\x02\xC5\xC6\x05-\x17\x02\xC60\x03\x02\x02\x02\xC7\xC9\t\n\x02\x02\xC8" +
		"\xC7\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCA" +
		"\xCB\x03\x02\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\b\x19\x02\x02\xCD" +
		"2\x03\x02\x02\x02\x15\x02TYkp\x7F\x85\x8A\x92\x94\x9C\xA9\xB0\xB2\xB5" +
		"\xBC\xBF\xC3\xCA\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

